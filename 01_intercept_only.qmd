---
title: "Stan 101"
format: html
---

```{r}
#| label: setup
#| message: false
library("rstan")
library("tidyverse")
library("tidybayes")
```


First we will write a linear model in Stan. 
This is the default model RStudio gives you as a template. 
**Note**: You have to use the chunk option `output.var` to access the Stan code after the fact. 

```{stan}
#| label: write-model
#| output.var: "model"
#| cache: true

// The input data is a vector 'y' of length 'N'.
data {
  int<lower=0> N;
  vector[N] y;
}

// The parameters accepted by the model. Our model
// accepts two parameters 'mu' and 'sigma'.
parameters {
  real mu;
  real<lower=0> sigma;
}

// The model to be estimated. We model the output
// 'y' to be normally distributed with mean 'mu'
// and standard deviation 'sigma'.
model {
  y ~ normal(mu, sigma);
}
```

Now we can fit the model. 
We have to do a few things: 

1. We use `rstan::sampling` to fit the object `model` from the previous chunk. 
2. We pass the data in the form of a list. 
3. We assign the output to the object `mod`. 

```{r}
#| label: fit-mod
#| cache: true
mod <- sampling(
  object = model, 
  data = list(
    y = rnorm(1000), 
    N = 1000
  ), 
  cores = 4
)
```

Now we can do all the normal stuff to the stan object. 

```{r}
#| label: play
print(mod, pars = c("mu", "sigma"))

posterior <- as.data.frame(mod)

posterior |> 
  ggplot() + 
  aes(x = mu, y = sigma) + 
  geom_point(pch = 15, alpha = 0.3) + 
  geom_point(
    data = posterior |> summarize(mu = mean(mu), sigma = mean(sigma)), 
    pch = 21, color = "white", fill = "#cc0033", size = 5
  ) + 
  ds4ling::ds4ling_bw_theme()

posterior |> 
  pivot_longer(
    cols = c("mu", "sigma"), 
    names_to = "pars", 
    values_to = "estimate"
  ) |> 
  ggplot() + 
  aes(x = estimate, y = pars) + 
  stat_halfeye() + 
  ds4ling::ds4ling_bw_theme()
```



